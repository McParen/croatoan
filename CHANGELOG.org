* ChangeLog

** Notable changes since v0.2

Notable changes since v0.2 (231014), which corresponds to Quicklisp release 231021:

*** Add wrapper and tests for terminfo function tigetstr (240107)

- Add C helper functions make-invalid-pointer, invalid-pointer-p
- Add wrapper tigetstr to avoid dealing with C pointers
- Add nctest16, t32a, t32b to test non-standard function keys
- Allow bind to accept control chars in caret notation (^X)
- Allow unbind to accept key chains
- Update bind/unbind examples
- Update copyrigt year to 2024

*** Add CFFI bindings to terminfo functions (231226)

- Add most of the bindings for low-level terminfo functions.
  Functions requiring function pointer arguments are yet to be done.
- Add low-level examples nctest14 and nctest15 to test querying 
  terminal capabilities.

*** Allow bind to accept event sequences (231218)

- Remove the current behavior which binds a list of events to 
  the same handler. Simply using mapc with bind is more idiomatic.
- Remove that behavior from several examples.
- When a list of events is now passed to bind, the handler is bound
  to the whole event sequence (key chain).
  For example, M-x style bindings are equal to (#\esc #\x).
- Add example t28c to test and show the usage of key chain events.
- Add utility functions unpair-plist, mapc-plist.

*** Add support for inheritance of keymap bindings (231211)

- Add a parent property to keymaps, currently only single inheritance.
  This allows several child maps to inherit the same set from a parent.
- Modify the define-kemap macro to accept a parent keymap as an argument.
- Remove the keymap initarg :bindings-plist.
  Use the slot initarg :bindings, which accepts both alists and plists.
- Modify get-event-handler to check parent keymaps, if available.

- Rename several function keys to be more intuitive and consistent:
  :key-scroll-forward -> :key-shift-arrow-down
  :key-scroll-reverse -> :key-shift-arrow-up
  :key-shift-left     -> :key-shift-arrow-left
  :key-shift-right    -> :key-shift-arrow-right
  :key-shift-previous -> :key-shift-previous-page
  :key-shift-next     -> :key-shift-next-page

- If an unknown key code is returned by get-event, do not print it,
  return a proper event with the code as the event key instead.
- Export textarea-map, checkbox-map, checklist-map.
- Refactor the keymap examples t28, t28a, t28b to test the changes.

** v0.2 (231014)

This version provides the second tagged development release.

Notable changes since v0.1 (230513), which corresponds to Quicklisp release 230619:

*** Increment version to v0.2, fix several style warnings (231014)
*** Miscellaneous small additions and fixes (231001)

Export symbols =find-node=, =field-add-char=, =delete-previous-char=,
=delete-next-char=.

*** Modify utility wrap-string to split long words (230909)

Long words (by default >20 chars) are split instead of being wrapped.
This avoids large gaps when long urls are wrapped.

*** Add support for soft function-key labels (230828)

Add separate package de.anvi.croatoan.soft-labels or slk.

Add screen initargs :enable-soft-labels and :soft-labels-layout.

Not covered (yet) ncurses function: extended-slk-color.

Add ncurses example nctest13, crt examples t44/a/b.

*** Add utility function pair-plist (230820)

pair-plist works like cl:pairlis, but returns a plist instead of an
alist, for example: (pair-plist '(a b c) '(1 2 3)) => (a 1 b 2 c 3)

Export tree function add-child.

*** Allow menus to contain nil items (230723)

Allow menus to contain nil items.

Allow menu items to be shorter than the underlying grid size. Until
now, it was necessary (impractical) to match the grid height x width
to the length of the items list.

Add helper functions move-left-possible-p, etc., that test whether
the new grid position would outside of the items list.

*** Rename function key names to be more readable (230715)

Instead of using the short, cryptic names like =:ic= (ncurses
=KEY_IC=) rename the function keys to be more readable, like
=:key-insert-char=, similar to how they are named in the Ada bindings.

This means that the often used event names like :left, :right, etc,
will have to be renamed to the more verbose (but more explicit)
:key-arrow-left, :key-arrow-right, etc.

Refactor all the positions in the code and examples using the short
names.

*** Add wrappers function-key-code and function-key-definition (230708)

Add wrappers =function-key-code= (=ncurses:key-defined=) and
=function-key-definition= (=ncurses:keybound=).

Modify example t32 to display =ncurses:keyname= and key-definition
of a function key.

Allow =define-function-key= to accept a string containing the key
sequence.

Allow the event key to be a number, to account for events without a
keyword name.

*** Add functions to determine the displayed width of wide chars (230701)

Add a CFFI wrapper for the libc function wcwidth, to determine the
width of a char, which is useful for determining the widths of strings
containing wide chars (modern emojis, asian characters) which cover
more than one character cell in a terminal (mostly they need two).

Add higher level functions char-width and string-width, which accept
lisp chars and strings and return nil instead of -1, if the argument
contains non-printable characters.

Add helper predicate =control-char-p=, which returns t if the character
code belongs to a control character, which is non-printable.

Add example t37 to show the use of and test those functions.

Fix Issue #53: Replace char ident =#\horizontal_ellipsis= by its code
point point to avoid issues with LispWorks. (Thanks to Yehouda)

*** Add a selection-callback to collections (230625)

This allows calling a function when a selection is changed, for
example when a new menu item is selected.

Add example t16j4: Use a menu to select a function name from
a package and display its docstring in a text area.

Add example t16j3a to test previously added element margins, ellipsis
on long menu item titles, right current item mark and column
alignment.

** v0.1 - Initial development release (230513)

This version provides the first tagged development release.

Notable changes since Quicklisp release 230214:

*** Increment croatoan version to v0.1, add ChangeLog (230513)
*** Add a way to align left/right and ellipsize menu item titles (230506)

All the initarg :align, so that items can be aligned if they are
shorter than the max-item-length or the calculated column width.

Do not allow the length of the item title to exceed max-item-length,
in that case the title is ellipsized or truncated.

Add the initarg :ellipsis, where the string can be specified,
which will replace the excess characters of a too long title.
If the ellipsis is an empty string, the title will simply be
truncated.

This patch resolves the issue #39 opened on 210213 by Mr-X-666.

*** Add a closing current item mark to menus (230427)

In addition to being a single string, current-item-mark can now
be given as a list of two strings, an opening and one closing mark
for the current item in a menu:

#+BEGIN_EXAMPLE
:current-item-mark "* "

   A
 * B
   C
   D

:current-item-mark '("> " " <")

   A
 > B <
   C
   D
#+END_EXAMPLE

*** Add a margin property to form elements (230415)

Based on the CSS box model, every element now also has a margin
property, which is a the transparent space outside of the border
separating the element from other elements in the layout.

*** Remove several files with obsolete pre-CLOS wrappers (230325)

Removed some old, unused thin wrappers (inopts, outopts).
The ncurses predicates can be used directly until properly
wrapped.

Croatoan:

- Add docstrings to several window accessors
- Move "opaqe" ncurses windows predicates to outopts.lisp.

Ncurses:

- Remove cffi type =attr=, use only =attr_t=
- Add keyok
- Add global variables curscr, newscr, stdscr

*** Allow tables to use the border style (230312)

Draw table lines using the border and selected-border styles.

Draw menu items only using the foreground menu style, this
includes the cells from item-padding.

The menu background style is only visible when a padding or gap
between the item rows/cols has been set.

The menu background is not visible when table lines are drawn.
In that case, we only see the border and foreground (items) colors.

Modify examples t16j2, t19b2, t19b3, t19c2, add example t16j3.

*** Decouple drawing of table lines and external borders (230304)

If border is nil, drawing a table now only draws the inner table
lines, i.e. row and column separators.

This now allows to draw menu tables withut borders. Before every
table had an external border.

Add a menu initarg item-padding, where 2 or 4 padding values can
be passed in a list.
